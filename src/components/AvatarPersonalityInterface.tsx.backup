import React, { useState } from "react";
import {
  User,
  Bot,
  Heart,
  MessageCircle,
  Palette,
  Star,
  Lightbulb,
  Music,
  Camera,
  Gamepad2,
  BookOpen,
  Code,
  Check,
  Plus,
  Edit3,
  Save,
  X,
} from "lucide-react";
import { cn } from "../lib/utils";

interface Personality {
  id: string;
  name: string;
  description: string;
  traits: string[];
  color: string;
  category: "creative" | "technical" | "social" | "analytical" | "artistic";
}

interface Avatar {
  id: string;
  name: string;
  image: string;
  personality: Personality;
  isAI: boolean;
  isSelected: boolean;
  productDescription?: string;
}

const AvatarPersonalityInterface: React.FC = () => {
  const [selectedAI, setSelectedAI] = useState<Avatar | null>(null);
  const [userAvatar, setUserAvatar] = useState<Avatar | null>(null);
  const [selectedPersonality, setSelectedPersonality] =
    useState<Personality | null>(null);
  const [showPersonalityModal, setShowPersonalityModal] = useState(false);
  const [editingPersonality, setEditingPersonality] =
    useState<Personality | null>(null);
  const [customPersonality, setCustomPersonality] = useState({
    name: "",
    description: "",
    category: "creative" as Personality["category"],
  });
  const [showConversation, setShowConversation] = useState(false);
  const [conversationMessages, setConversationMessages] = useState<any[]>([]);
  const [inputMessage, setInputMessage] = useState("");

  const personalities: Personality[] = [
    {
      id: "creative",
      name: "Creative Muse",
      description:
        "Inspirational and artistic, helps with creative projects and brainstorming",
      traits: ["Imaginative", "Artistic", "Inspirational", "Open-minded"],
      color: "from-purple-500 to-pink-500",
      category: "creative",
    },
    {
      id: "technical",
      name: "Tech Expert",
      description:
        "Logical and analytical, perfect for coding and technical discussions",
      traits: ["Logical", "Analytical", "Precise", "Problem-solver"],
      color: "from-blue-500 to-cyan-500",
      category: "technical",
    },
    {
      id: "analytical",
      name: "Data Analyst",
      description:
        "Research-focused and detail-oriented, ideal for analysis and insights",
      traits: ["Detail-oriented", "Research-focused", "Insightful", "Thorough"],
      color: "from-orange-500 to-red-500",
      category: "analytical",
    },
    {
      id: "musical",
      name: "Music Lover",
      description:
        "Rhythmic and harmonious, great for music and audio discussions",
      traits: ["Rhythmic", "Harmonious", "Melodic", "Expressive"],
      color: "from-pink-500 to-rose-500",
      category: "artistic",
    },
    {
      id: "scholar",
      name: "Knowledge Seeker",
      description:
        "Wise and learned, ideal for educational and philosophical discussions",
      traits: ["Wise", "Learned", "Philosophical", "Curious"],
      color: "from-teal-500 to-cyan-500",
      category: "analytical",
    },
  ];

  const aiAvatars: Avatar[] = [
    {
      id: "ai-2",
      name: "Claude",
      image: "/logos/anthropic-logo.svg",
      personality: personalities[1], // Tech Expert
      isAI: true,
      isSelected: false,
      productDescription:
        "Sophisticated language model focused on safety and helpfulness in technical discussions",
    },
    {
      id: "ai-3",
      name: "GPT-4",
      image: "/logos/openai-logo.svg",
      personality: personalities[2], // Data Analyst
      isAI: true,
      isSelected: false,
      productDescription:
        "Powerful multimodal AI model with advanced reasoning and analysis capabilities",
    },
    {
      id: "ai-4",
      name: "Gemini",
      image: "/logos/google-logo.svg",
      personality: personalities[4], // Knowledge Seeker
      isAI: true,
      isSelected: false,
      productDescription:
        "Google's most capable AI model with deep knowledge and research capabilities",
    },
    {
      id: "ai-5",
      name: "Copilot",
      image: "/logos/microsoft-logo.svg",
      personality: personalities[3], // Music Lover
      isAI: true,
      isSelected: false,
      productDescription:
        "AI-powered coding assistant that helps developers write better code faster",
    },
    {
      id: "ai-6",
      name: "Llama",
      image: "/logos/meta-logo.svg",
      personality: personalities[0], // Creative Muse
      isAI: true,
      isSelected: false,
      productDescription:
        "Open-source language model with strong performance across various tasks",
    },
  ];

  const userAvatars: Avatar[] = [
    {
      id: "user-1",
      name: "Alex",
      image: "👨‍💻",
      personality: personalities[1], // Tech Expert
      isAI: false,
      isSelected: false,
    },
    {
      id: "user-2",
      name: "Sarah",
      image: "🎨",
      personality: personalities[0], // Creative Muse
      isAI: false,
      isSelected: false,
    },
    {
      id: "user-3",
      name: "Mike",
      image: "🏆",
      personality: personalities[2], // Data Analyst
      isAI: false,
      isSelected: false,
    },
    {
      id: "user-4",
      name: "Emma",
      image: "📚",
      personality: personalities[4], // Knowledge Seeker
      isAI: false,
      isSelected: false,
    },
  ];

  const handleAISelection = (avatar: Avatar) => {
    setSelectedAI(avatar);
    // Update selection state
    aiAvatars.forEach((ai) => (ai.isSelected = ai.id === avatar.id));
  };

  const handleUserSelection = (avatar: Avatar) => {
    // If a personality is selected, apply it to the new avatar
    const avatarWithPersonality = selectedPersonality
      ? { ...avatar, personality: selectedPersonality }
      : avatar;

    setUserAvatar(avatarWithPersonality);
    // Update selection state
    userAvatars.forEach((user) => (user.isSelected = user.id === avatar.id));
  };

  const handlePersonalitySelection = (personality: Personality) => {
    setSelectedPersonality(personality);
    // Update the user avatar's personality if one is selected
    if (userAvatar) {
      const updatedUserAvatar = { ...userAvatar, personality };
      setUserAvatar(updatedUserAvatar);
    }
  };

  const handlePersonalityEdit = (personality: Personality) => {
    setEditingPersonality(personality);
    setCustomPersonality({
      name: personality.name,
      description: personality.description,
      category: personality.category,
    });
    setShowPersonalityModal(true);
  };

  const handleSavePersonality = () => {
    if (editingPersonality) {
      // Update the personality
      editingPersonality.name = customPersonality.name;
      editingPersonality.description = customPersonality.description;
      editingPersonality.category = customPersonality.category;
    }
    setShowPersonalityModal(false);
    setEditingPersonality(null);
  };

  const getCategoryIcon = (category: Personality["category"]) => {
    switch (category) {
      case "creative":
        return <Palette className="w-4 h-4" />;
      case "technical":
        return <Code className="w-4 h-4" />;
      case "social":
        return <Heart className="w-4 h-4" />;
      case "analytical":
        return <Lightbulb className="w-4 h-4" />;
      case "artistic":
        return <Camera className="w-4 h-4" />;
    }
  };

  const startConversation = () => {
    if (!selectedAI || !userAvatar) return;

    const welcomeMessage = {
      id: Date.now().toString(),
      content: `Hello ${userAvatar.name}! I'm ${
        selectedAI.name
      }, your ${selectedAI.personality.name.toLowerCase()}. I'm excited to chat with you! What would you like to discuss today?`,
      sender: selectedAI,
      timestamp: new Date(),
      isAI: true,
    };

    setConversationMessages([welcomeMessage]);
    setShowConversation(true);
  };

  const sendMessage = () => {
    if (!inputMessage.trim() || !selectedAI || !userAvatar) return;

    const userMessage = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: userAvatar,
      timestamp: new Date(),
      isAI: false,
    };

    setConversationMessages((prev) => [...prev, userMessage]);
    setInputMessage("");

    // Simulate AI response based on personality
    setTimeout(() => {
      const aiResponse = generateAIResponse(
        inputMessage,
        selectedAI,
        userAvatar
      );
      setConversationMessages((prev) => [...prev, aiResponse]);
    }, 1000);
  };

  const generateAIResponse = (
    userMessage: string,
    ai: Avatar,
    user: Avatar
  ) => {
    const responses = {
      creative: [
        "That's a fascinating idea! Let me help you explore that creative direction...",
        "I love your creative thinking! Here's how we could develop this concept...",
        "Your imagination is inspiring! Let's brainstorm some creative solutions...",
      ],
      technical: [
        "From a technical perspective, here's how we could approach this...",
        "Let me break this down logically and provide a systematic solution...",
        "Technically speaking, here are the key considerations...",
      ],
      social: [
        "I understand how you feel about that. Let's talk through it together...",
        "That's a great point! I'd love to hear more about your perspective...",
        "I'm here to support you. What are your thoughts on this?",
      ],
      analytical: [
        "Let me analyze this situation and provide some insights...",
        "Based on the data and patterns, here's what I observe...",
        "Let's examine this from different analytical angles...",
      ],
      artistic: [
        "That's beautifully expressed! Let me share some artistic insights...",
        "I appreciate your artistic sensibility. Here's a creative perspective...",
        "Your artistic vision is wonderful! Let's explore this creatively...",
      ],
    };

    const personalityType = ai.personality.category;
    const possibleResponses = responses[personalityType] || responses.creative;
    const randomResponse =
      possibleResponses[Math.floor(Math.random() * possibleResponses.length)];

    return {
      id: (Date.now() + 1).toString(),
      content: randomResponse,
      sender: ai,
      timestamp: new Date(),
      isAI: true,
    };
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="min-h-[calc(100vh-64px)] bg-gradient-to-br from-slate-50 to-blue-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Avatar & Personality Selector
          </h1>
          <p className="text-gray-600">
            Choose your AI companion and customize your own avatar and
            personality
          </p>
        </div>

        {/* Main Content Area */}
        <div className="max-w-6xl mx-auto">
          {/* Avatar Selection Section */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* AI Avatars */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Bot className="w-5 h-5 text-blue-500" />
                  AI Companions
                </h3>

                {/* Selection indicator */}
                {selectedAI && (
                  <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 flex items-center justify-center">
                        {selectedAI.image.startsWith("/") ? (
                          <img
                            src={selectedAI.image}
                            alt={selectedAI.name}
                            className="w-6 h-6 object-contain"
                          />
                        ) : (
                          <div className="text-xl">{selectedAI.image}</div>
                        )}
                      </div>
                      <div>
                        <p className="font-medium text-gray-900 text-sm">
                          Selected: {selectedAI.name}
                        </p>
                        <p className="text-xs text-gray-600">
                          {selectedAI.productDescription ||
                            selectedAI.personality.description}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  {aiAvatars.map((avatar) => (
                    <div
                      key={avatar.id}
                      onClick={() => handleAISelection(avatar)}
                      className={cn(
                        "relative p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 hover:bg-gray-50",
                        selectedAI?.id === avatar.id
                          ? "border-blue-500 bg-blue-50 shadow-lg"
                          : "border-gray-200 hover:border-gray-300"
                      )}
                    >
                      {/* Top selection indicator */}
                      {selectedAI?.id === avatar.id && (
                        <div className="absolute -top-2 left-1/2 transform -translate-x-1/2">
                          <div className="bg-blue-500 text-white text-xs px-3 py-1 rounded-full font-medium">
                            Selected
                          </div>
                        </div>
                      )}

                      <div className="flex items-center space-x-4">
                        <div className="w-12 h-12 flex items-center justify-center flex-shrink-0">
                          {avatar.image.startsWith("/") ? (
                            <img
                              src={avatar.image}
                              alt={avatar.name}
                              className="w-10 h-10 object-contain"
                            />
                          ) : (
                            <div className="text-3xl">{avatar.image}</div>
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <h4 className="font-semibold text-gray-900 mb-1">
                            {avatar.name}
                          </h4>
                          <p className="text-sm text-gray-600 line-clamp-2">
                            {avatar.productDescription ||
                              avatar.personality.description}
                          </p>
                        </div>
                        {selectedAI?.id === avatar.id && (
                          <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                            <Check className="w-4 h-4 text-white" />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* User Avatars */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <User className="w-5 h-5 text-green-500" />
                  Your Avatar
                </h3>

                {/* Selection indicator */}
                {userAvatar && (
                  <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="text-xl">{userAvatar.image}</div>
                      <div>
                        <p className="font-medium text-gray-900 text-sm">
                          Selected: {userAvatar.name}
                        </p>
                        <p className="text-xs text-gray-600">
                          {selectedPersonality
                            ? selectedPersonality.description
                            : userAvatar.personality.description}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  {userAvatars.map((avatar) => (
                    <div
                      key={avatar.id}
                      onClick={() => handleUserSelection(avatar)}
                      className={cn(
                        "relative p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 hover:bg-gray-50",
                        userAvatar?.id === avatar.id
                          ? "border-green-500 bg-green-50 shadow-lg"
                          : "border-gray-200 hover:border-gray-300"
                      )}
                    >
                      {/* Top selection indicator */}
                      {userAvatar?.id === avatar.id && (
                        <div className="absolute -top-2 left-1/2 transform -translate-x-1/2">
                          <div className="bg-green-500 text-white text-xs px-3 py-1 rounded-full font-medium">
                            Selected
                          </div>
                        </div>
                      )}

                      <div className="flex items-center space-x-4">
                        <div className="w-12 h-12 flex items-center justify-center flex-shrink-0">
                          <div className="text-3xl">{avatar.image}</div>
                        </div>
                        <div className="flex-1 min-w-0">
                          <h4 className="font-semibold text-gray-900 mb-1">
                            {avatar.name}
                          </h4>
                          <p className="text-sm text-gray-600 line-clamp-2">
                            {selectedPersonality &&
                            userAvatar?.id === avatar.id
                              ? selectedPersonality.description
                              : avatar.personality.description}
                          </p>
                        </div>
                        {userAvatar?.id === avatar.id && (
                          <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
                            <Check className="w-4 h-4 text-white" />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Personality Library */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Palette className="w-5 h-5 text-purple-500" />
                  Personality Library
                </h3>
                <p className="text-sm text-gray-600 mb-4">
                  Browse and customize personality types
                </p>

                {/* Selection indicator */}
                {selectedPersonality && (
                  <div className="mb-4 p-3 bg-purple-50 border border-purple-200 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div
                        className={cn(
                          "w-8 h-8 rounded-md bg-gradient-to-r flex items-center justify-center",
                          selectedPersonality.color
                        )}
                      >
                        {getCategoryIcon(selectedPersonality.category)}
                      </div>
                      <div>
                        <p className="font-medium text-gray-900 text-sm">
                          Selected: {selectedPersonality.name}
                        </p>
                        <p className="text-xs text-gray-600">
                          {selectedPersonality.description}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  {personalities.map((personality) => (
                    <div
                      key={personality.id}
                      className={cn(
                        "relative p-3 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-sm",
                        selectedPersonality?.id === personality.id
                          ? "border-purple-500 bg-purple-50 shadow-lg"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      )}
                      onClick={() => handlePersonalitySelection(personality)}
                    >
                      {/* Top selection indicator */}
                      {selectedPersonality?.id === personality.id && (
                        <div className="absolute -top-2 left-1/2 transform -translate-x-1/2">
                          <div className="bg-purple-500 text-white text-xs px-3 py-1 rounded-full font-medium">
                            Selected
                          </div>
                        </div>
                      )}

                      <div className="flex items-center gap-2 mb-2">
                        <div
                          className={cn(
                            "w-6 h-6 rounded-md bg-gradient-to-r flex items-center justify-center",
                            personality.color
                          )}
                        >
                          {getCategoryIcon(personality.category)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-gray-900 text-sm truncate">
                            {personality.name}
                          </h3>
                          <div className="flex items-center gap-1">
                            {getCategoryIcon(personality.category)}
                            <span className="text-xs text-gray-500 capitalize">
                              {personality.category}
                            </span>
                          </div>
                        </div>
                        {selectedPersonality?.id === personality.id && (
                          <div className="w-5 h-5 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
                            <Check className="w-3 h-3 text-white" />
                          </div>
                        )}
                      </div>
                      <p className="text-xs text-gray-600 line-clamp-2">
                        {personality.description}
                      </p>
                      <div className="mt-2 flex justify-end">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handlePersonalityEdit(personality);
                          }}
                          className="text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 px-2 py-1 rounded transition-colors"
                        >
                          Edit
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

              {/* Start Conversation Button */}
              {selectedAI &&
                userAvatar &&
                selectedPersonality &&
                !showConversation && (
                  <div className="mt-6 text-center">
                    <button
                      onClick={startConversation}
                      className="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 flex items-center gap-2 mx-auto"
                    >
                      <MessageCircle className="w-5 h-5" />
                      Start Conversation with {selectedAI.name}
                    </button>
                    <p className="text-sm text-gray-500 mt-2">
                      {userAvatar.name} ({selectedPersonality.name}) will chat
                      with {selectedAI.name} ({selectedAI.personality.name})
                    </p>
                  </div>
                )}

              {/* Missing Selection Warning */}
              {selectedAI &&
                userAvatar &&
                !selectedPersonality &&
                !showConversation && (
                  <div className="mt-6 text-center">
                    <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-xl">
                      <p className="text-sm text-yellow-800">
                        Please select a personality from the Personality Library
                        to start your conversation.
                      </p>
                    </div>
                  </div>
                )}

              {/* Selected Avatars Summary with Personality Selection */}
              {(selectedAI || userAvatar) && (
                <div className="mt-6 p-6 bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl border border-gray-200">
                  <h3 className="font-semibold text-gray-900 mb-4 flex items-center gap-2">
                    <Star className="w-5 h-5 text-yellow-500" />
                    Selected Avatars & Personalities
                  </h3>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* AI Avatar and Personality */}
                    {selectedAI && (
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                          <div className="w-10 h-10 flex items-center justify-center">
                            {selectedAI.image.startsWith("/") ? (
                              <img
                                src={selectedAI.image}
                                alt={selectedAI.name}
                                className="w-8 h-8 object-contain"
                              />
                            ) : (
                              <div className="text-2xl">{selectedAI.image}</div>
                            )}
                          </div>
                          <div>
                            <p className="font-medium text-gray-900">
                              {selectedAI.name}
                            </p>
                            <p className="text-sm text-gray-600">
                              AI Companion
                            </p>
                          </div>
                        </div>

                        <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-8 h-8 flex items-center justify-center">
                              {selectedAI.image.startsWith("/") ? (
                                <img
                                  src={selectedAI.image}
                                  alt={selectedAI.name}
                                  className="w-6 h-6 object-contain"
                                />
                              ) : (
                                <div className="text-lg">
                                  {selectedAI.image}
                                </div>
                              )}
                            </div>
                            <div>
                              <h4 className="font-semibold text-gray-900 text-sm">
                                {selectedAI.name}
                              </h4>
                              <div className="flex items-center gap-2">
                                <div
                                  className={cn(
                                    "w-3 h-3 rounded-full bg-gradient-to-r",
                                    selectedAI.personality.color
                                  )}
                                ></div>
                                <span className="text-xs font-medium text-gray-700">
                                  {selectedAI.personality.name}
                                </span>
                                <button
                                  onClick={() =>
                                    handlePersonalityEdit(
                                      selectedAI.personality
                                    )
                                  }
                                  className="p-1 hover:bg-blue-200 rounded transition-colors"
                                >
                                  <Edit3 className="w-3 h-3 text-blue-600" />
                                </button>
                              </div>
                            </div>
                          </div>
                          <p className="text-xs text-gray-600">
                            {selectedAI.personality.description}
                          </p>
                        </div>
                      </div>
                    )}

                    {/* User Avatar and Personality */}
                    {userAvatar && (
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                          <div className="text-2xl">{userAvatar.image}</div>
                          <div>
                            <p className="font-medium text-gray-900">
                              {userAvatar.name}
                            </p>
                            <p className="text-sm text-gray-600">Your Avatar</p>
                          </div>
                        </div>

                        <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-200">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="text-lg">{userAvatar.image}</div>
                            <div>
                              <h4 className="font-semibold text-gray-900 text-sm">
                                {userAvatar.name}
                              </h4>
                              <div className="flex items-center gap-2">
                                <div
                                  className={cn(
                                    "w-3 h-3 rounded-full bg-gradient-to-r",
                                    selectedPersonality
                                      ? selectedPersonality.color
                                      : userAvatar.personality.color
                                  )}
                                ></div>
                                <span className="text-xs font-medium text-gray-700">
                                  {selectedPersonality
                                    ? selectedPersonality.name
                                    : userAvatar.personality.name}
                                </span>
                                <button
                                  onClick={() =>
                                    handlePersonalityEdit(
                                      selectedPersonality ||
                                        userAvatar.personality
                                    )
                                  }
                                  className="p-1 hover:bg-green-200 rounded transition-colors"
                                >
                                  <Edit3 className="w-3 h-3 text-green-600" />
                                </button>
                              </div>
                            </div>
                          </div>
                          <p className="text-xs text-gray-600">
                            {selectedPersonality
                              ? selectedPersonality.description
                              : userAvatar.personality.description}
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Conversation Interface */}
        {showConversation && selectedAI && userAvatar && (
          <div className="mt-8 bg-white rounded-2xl shadow-lg p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <div className="text-2xl">{userAvatar.image}</div>
                  <div className="text-2xl">{selectedAI.image}</div>
                </div>
                <div>
                  <h2 className="text-xl font-bold text-gray-900">
                    {userAvatar.name} & {selectedAI.name}
                  </h2>
                  <p className="text-sm text-gray-500">
                    {userAvatar.personality.name} ×{" "}
                    {selectedAI.personality.name}
                  </p>
                </div>
              </div>
              <button
                onClick={() => setShowConversation(false)}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            {/* Messages */}
            <div className="h-96 overflow-y-auto mb-4 space-y-4 p-4 bg-gray-50 rounded-xl">
              {conversationMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-3 ${
                    message.isAI ? "justify-start" : "justify-end"
                  }`}
                >
                  {message.isAI && (
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">
                      {selectedAI.image}
                    </div>
                  )}
                  <div
                    className={`max-w-xs px-4 py-2 rounded-2xl ${
                      message.isAI
                        ? "bg-white border border-gray-200 text-gray-900"
                        : "bg-blue-500 text-white"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString([], {
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </p>
                  </div>
                  {!message.isAI && (
                    <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">
                      {userAvatar.image}
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Input */}
            <div className="flex gap-3">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type your message..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                onClick={sendMessage}
                disabled={!inputMessage.trim()}
                className="px-6 py-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                Send
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Personality Edit Modal */}
      {showPersonalityModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">
                Edit Personality
              </h3>
              <button
                onClick={() => setShowPersonalityModal(false)}
                className="p-1 hover:bg-gray-100 rounded transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Name
                </label>
                <input
                  type="text"
                  value={customPersonality.name}
                  onChange={(e) =>
                    setCustomPersonality((prev) => ({
                      ...prev,
                      name: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={customPersonality.description}
                  onChange={(e) =>
                    setCustomPersonality((prev) => ({
                      ...prev,
                      description: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Category
                </label>
                <select
                  value={customPersonality.category}
                  onChange={(e) =>
                    setCustomPersonality((prev) => ({
                      ...prev,
                      category: e.target.value as Personality["category"],
                    }))
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="creative">Creative</option>
                  <option value="technical">Technical</option>
                  <option value="social">Social</option>
                  <option value="analytical">Analytical</option>
                  <option value="artistic">Artistic</option>
                </select>
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setShowPersonalityModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSavePersonality}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
              >
                <Save className="w-4 h-4" />
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AvatarPersonalityInterface;
